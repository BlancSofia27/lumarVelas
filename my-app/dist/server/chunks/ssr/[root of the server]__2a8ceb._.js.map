{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/api.js"],"sourcesContent":["import { readFileSync, writeFileSync } from \"node:fs\";\r\nimport { MercadoPagoConfig, Preference, OAuth } from \"mercadopago\";\r\n\r\nexport const mercadopago = new MercadoPagoConfig({ accessToken: process.env.MP_ACCESS_TOKEN });\r\n\r\nconst api = {\r\n  user: {\r\n    async fetch() {\r\n      // Leemos el archivo de la base de datos del usuario\r\n      const db = readFileSync(\"db/user.db\");\r\n\r\n      // Devolvemos los datos como un objeto\r\n      return JSON.parse(db.toString());\r\n    },\r\n    async update(data) {\r\n      // Obtenemos los datos del usuario\r\n      const db = await api.user.fetch();\r\n\r\n      // Extendemos los datos con los nuevos datos\r\n      const draft = { ...db, ...data };\r\n\r\n      // Guardamos los datos\r\n      writeFileSync(\"db/user.db\", JSON.stringify(draft, null, 2));\r\n    },\r\n    async authorize() {\r\n      // Obtenemos la url de autorización\r\n      const url = new OAuth(mercadopago).getAuthorizationURL({\r\n        options: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos la url\r\n      return url;\r\n    },\r\n    async connect(code) {\r\n      // Obtenemos las credenciales del usuario usando el code que obtuvimos de oauth\r\n      const credentials = await new OAuth(mercadopago).create({\r\n        body: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          client_secret: process.env.MP_CLIENT_SECRET,\r\n          code,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos las credenciales\r\n      return credentials;\r\n    },\r\n  },\r\n  message: {\r\n    async list() {\r\n      // Leemos el archivo de la base de datos de los mensajes\r\n      const db = readFileSync(\"db/message.db\");\r\n\r\n      // Devolvemos los datos como un array de objetos\r\n      return JSON.parse(db.toString());\r\n    },\r\n    async add(message) {\r\n      // Obtenemos los mensajes\r\n      const db = await api.message.list();\r\n\r\n      // Si ya existe un mensaje con ese id, lanzamos un error\r\n      if (db.some((_message) => _message.id === message.id)) {\r\n        throw new Error(\"Message already added\");\r\n      }\r\n\r\n      // Agregamos el nuevo mensaje\r\n      const draft = db.concat(message);\r\n\r\n      // Guardamos los datos\r\n      writeFileSync(\"db/message.db\", JSON.stringify(draft, null, 2));\r\n    },\r\n    async submit(text, marketplace) {\r\n      // Creamos el cliente de Mercado Pago usando el access token del Marketplace\r\n      const client = new MercadoPagoConfig({ accessToken: marketplace });\r\n\r\n      // Creamos la preferencia incluyendo el precio, título y metadata.\r\n      const preference = await new Preference(client).create({\r\n        body: {\r\n          items: [\r\n            {\r\n              id: \"message\",\r\n              unit_price: 100,\r\n              quantity: 1,\r\n              title: \"Mensaje de muro\",\r\n            },\r\n          ],\r\n          metadata: {\r\n            text,\r\n          },\r\n          marketplace_fee: 5, // Le agregamos ARS 5 de comisión\r\n        },\r\n      });\r\n\r\n      // Devolvemos el init point (url de pago) para que el usuario pueda pagar\r\n      return preference.init_point;\r\n    },\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,cAAc,IAAI,4IAAA,CAAA,oBAAiB,CAAC;IAAE,aAAa,QAAQ,GAAG,CAAC,eAAe;AAAC;AAE5F,MAAM,MAAM;IACV,MAAM;QACJ,MAAM;YACJ,oDAAoD;YACpD,MAAM,KAAK,CAAA,GAAA,mGAAA,CAAA,eAAY,AAAD,EAAE;YAExB,sCAAsC;YACtC,OAAO,KAAK,KAAK,CAAC,GAAG,QAAQ;QAC/B;QACA,MAAM,QAAO,IAAI;YACf,kCAAkC;YAClC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK;YAE/B,4CAA4C;YAC5C,MAAM,QAAQ;gBAAE,GAAG,EAAE;gBAAE,GAAG,IAAI;YAAC;YAE/B,sBAAsB;YACtB,CAAA,GAAA,mGAAA,CAAA,gBAAa,AAAD,EAAE,cAAc,KAAK,SAAS,CAAC,OAAO,MAAM;QAC1D;QACA,MAAM;YACJ,mCAAmC;YACnC,MAAM,MAAM,IAAI,4IAAA,CAAA,QAAK,CAAC,aAAa,mBAAmB,CAAC;gBACrD,SAAS;oBACP,SAAS;oBACT,cAAc,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC;gBAChE;YACF;YAEA,oBAAoB;YACpB,OAAO;QACT;QACA,MAAM,SAAQ,IAAI;YAChB,+EAA+E;YAC/E,MAAM,cAAc,MAAM,IAAI,4IAAA,CAAA,QAAK,CAAC,aAAa,MAAM,CAAC;gBACtD,MAAM;oBACJ,SAAS;oBACT,eAAe,QAAQ,GAAG,CAAC,gBAAgB;oBAC3C;oBACA,cAAc,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC;gBAChE;YACF;YAEA,8BAA8B;YAC9B,OAAO;QACT;IACF;IACA,SAAS;QACP,MAAM;YACJ,wDAAwD;YACxD,MAAM,KAAK,CAAA,GAAA,mGAAA,CAAA,eAAY,AAAD,EAAE;YAExB,gDAAgD;YAChD,OAAO,KAAK,KAAK,CAAC,GAAG,QAAQ;QAC/B;QACA,MAAM,KAAI,OAAO;YACf,yBAAyB;YACzB,MAAM,KAAK,MAAM,IAAI,OAAO,CAAC,IAAI;YAEjC,wDAAwD;YACxD,IAAI,GAAG,IAAI,CAAC,CAAC,WAAa,SAAS,EAAE,KAAK,QAAQ,EAAE,GAAG;gBACrD,MAAM,IAAI,MAAM;YAClB;YAEA,6BAA6B;YAC7B,MAAM,QAAQ,GAAG,MAAM,CAAC;YAExB,sBAAsB;YACtB,CAAA,GAAA,mGAAA,CAAA,gBAAa,AAAD,EAAE,iBAAiB,KAAK,SAAS,CAAC,OAAO,MAAM;QAC7D;QACA,MAAM,QAAO,IAAI,EAAE,WAAW;YAC5B,4EAA4E;YAC5E,MAAM,SAAS,IAAI,4IAAA,CAAA,oBAAiB,CAAC;gBAAE,aAAa;YAAY;YAEhE,kEAAkE;YAClE,MAAM,aAAa,MAAM,IAAI,4IAAA,CAAA,aAAU,CAAC,QAAQ,MAAM,CAAC;gBACrD,MAAM;oBACJ,OAAO;wBACL;4BACE,IAAI;4BACJ,YAAY;4BACZ,UAAU;4BACV,OAAO;wBACT;qBACD;oBACD,UAAU;wBACR;oBACF;oBACA,iBAAiB;gBACnB;YACF;YAEA,yEAAyE;YACzE,OAAO,WAAW,UAAU;QAC9B;IACF;AACF;uCAEe"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
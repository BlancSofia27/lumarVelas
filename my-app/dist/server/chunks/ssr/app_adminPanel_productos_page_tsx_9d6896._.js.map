{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/adminPanel/productos/page.tsx"],"sourcesContent":["\"use client\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Box, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\nimport Image from 'next/image'; // Si usas Next.js, si no, usa 'img' directamente\r\nimport { supabase } from '../../../utils/supabaseClient'; // Importa el cliente de Supabase\r\n\r\nconst ProductTable = () => {\r\n  const [products, setProducts] = useState([]); // Para almacenar los productos\r\n  const [loading, setLoading] = useState(true); // Para mostrar un estado de carga\r\n\r\n  // Cargar los productos desde Supabase\r\n  const fetchProducts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase.from('products').select('*'); // Reemplaza 'products' con el nombre de tu tabla\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      setProducts(data); // Guarda los productos en el estado\r\n    } catch (error) {\r\n      console.error('Error al obtener los productos:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cargar los productos al montar el componente\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  return (\r\n    <Box mt={4} className=\"p-6\">\r\n      <Button\r\n        variant=\"contained\"\r\n        href=\"newProduct\"\r\n        sx={{\r\n          backgroundColor: '#1e90ff',\r\n          color: 'white',\r\n          '&:hover': {\r\n            backgroundColor: '#187bcd',\r\n          },\r\n        }}\r\n        size=\"large\"\r\n      >\r\n        Añadir Nuevo Producto\r\n      </Button>\r\n\r\n      {/* Tabla de productos */}\r\n      <TableContainer component={Paper} sx={{ mt: 3 }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Imagen</TableCell>\r\n              <TableCell>Producto</TableCell>\r\n              <TableCell>Descripción</TableCell>\r\n              <TableCell>Precio</TableCell>\r\n              <TableCell>Categoría</TableCell>\r\n              <TableCell></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {loading ? (\r\n              <TableRow>\r\n                <TableCell colSpan={6} align=\"center\">Cargando...</TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              products.map((product) => (\r\n                <TableRow key={product.id}>\r\n                  <TableCell>\r\n                    <Image\r\n                      src={product.image_url} // Asumiendo que 'image_url' es la columna en tu tabla que almacena la URL de la imagen\r\n                      alt={product.name}\r\n                      width={50}\r\n                      height={50}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>{product.name}</TableCell>\r\n                  <TableCell>{product.description}</TableCell>\r\n                  <TableCell>${product.price}</TableCell>\r\n                  <TableCell>{product.category}</TableCell>\r\n                  <TableCell>\r\n                    <Button>Editar</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductTable;\r\n"],"names":[],"mappings":";;;;AACA;AAEA,yNAAgC,iDAAiD;AACjF,gNAA0D,iCAAiC;AAF3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;;;AAMA,MAAM,eAAe;IACnB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE,GAAG,+BAA+B;IAC7E,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,kCAAkC;IAEhF,sCAAsC;IACtC,MAAM,gBAAgB;QACpB,IAAI;YACF,WAAW;YACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,uHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,MAAM,iDAAiD;YAEtH,IAAI,OAAO;gBACT,MAAM;YACR;YAEA,YAAY,OAAO,oCAAoC;QACzD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;QACnD,SAAU;YACR,WAAW;QACb;IACF;IAEA,+CAA+C;IAC/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC,iLAAA,CAAA,MAAG;QAAC,IAAI;QAAG,WAAU;;0BACpB,8OAAC,0LAAA,CAAA,SAAM;gBACL,SAAQ;gBACR,MAAK;gBACL,IAAI;oBACF,iBAAiB;oBACjB,OAAO;oBACP,WAAW;wBACT,iBAAiB;oBACnB;gBACF;gBACA,MAAK;0BACN;;;;;;0BAKD,8OAAC,kNAAA,CAAA,iBAAc;gBAAC,WAAW,uLAAA,CAAA,QAAK;gBAAE,IAAI;oBAAE,IAAI;gBAAE;0BAC5C,cAAA,8OAAC,uLAAA,CAAA,QAAK;;sCACJ,8OAAC,mMAAA,CAAA,YAAS;sCACR,cAAA,8OAAC,gMAAA,CAAA,WAAQ;;kDACP,8OAAC,mMAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,mMAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,mMAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,mMAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,mMAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,mMAAA,CAAA,YAAS;;;;;;;;;;;;;;;;sCAGd,8OAAC,mMAAA,CAAA,YAAS;sCACP,wBACC,8OAAC,gMAAA,CAAA,WAAQ;0CACP,cAAA,8OAAC,mMAAA,CAAA,YAAS;oCAAC,SAAS;oCAAG,OAAM;8CAAS;;;;;;;;;;uCAGxC,SAAS,GAAG,CAAC,CAAC,wBACZ,8OAAC,gMAAA,CAAA,WAAQ;;sDACP,8OAAC,mMAAA,CAAA,YAAS;sDACR,cAAA,8OAAC,6HAAA,CAAA,UAAK;gDACJ,KAAK,QAAQ,SAAS;gDACtB,KAAK,QAAQ,IAAI;gDACjB,OAAO;gDACP,QAAQ;;;;;;;;;;;sDAGZ,8OAAC,mMAAA,CAAA,YAAS;sDAAE,QAAQ,IAAI;;;;;;sDACxB,8OAAC,mMAAA,CAAA,YAAS;sDAAE,QAAQ,WAAW;;;;;;sDAC/B,8OAAC,mMAAA,CAAA,YAAS;;gDAAC;gDAAE,QAAQ,KAAK;;;;;;;sDAC1B,8OAAC,mMAAA,CAAA,YAAS;sDAAE,QAAQ,QAAQ;;;;;;sDAC5B,8OAAC,mMAAA,CAAA,YAAS;sDACR,cAAA,8OAAC,0LAAA,CAAA,SAAM;0DAAC;;;;;;;;;;;;mCAdG,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBzC;uCAEe"}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
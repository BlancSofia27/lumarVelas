{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/utils/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLIC_ANON_KEY;\r\n\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Supabase URL and Key are required');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAGN,uCAAkC;;AAElC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/api.js"],"sourcesContent":["\r\nimport { MercadoPagoConfig, Preference, OAuth } from \"mercadopago\";\r\nimport { supabase } from \"./utils/supabaseClient\";\r\nexport const mercadopago = new MercadoPagoConfig({ accessToken: process.env.MP_ACCESS_TOKEN });\r\n\r\nconst api = {\r\n  user: {\r\n    async fetch() {\r\n      // Obtenemos los datos de la tabla 'clients' desde Supabase\r\n      const { data, error } = await supabase\r\n        .from('clients')\r\n        .select('*')\r\n        .single(); // Asegura que solo devuelvas un objeto\r\n    \r\n      if (error) {\r\n        throw new Error(`Error al obtener los datos del cliente: ${error.message}`);\r\n      }\r\n    \r\n      // Devolvemos los datos del usuario\r\n      console.log('Datos del cliente:', data);\r\n      return data;\r\n    },\r\n    \r\n    async update(data) {\r\n      // Actualizamos los datos en Supabase\r\n      const { error } = await supabase\r\n      .from('clients')\r\n      .update(data)  // Actualiza la fila existente con los datos proporcionados\r\n      .eq('id', 1);  // Filtra para asegurar que actualizas la fila correcta (en este caso, la fila con id 1)\r\n  \r\n      if (error) {\r\n        throw new Error(`Error al actualizar los datos del cliente: ${error.message}`);\r\n      }\r\n  \r\n      // Si quieres devolver los datos actualizados (opcional)\r\n      console.log('Datos del cliente actualizados:', data);\r\n      return data;\r\n    },\r\n    async authorize() {\r\n      // Obtenemos la url de autorización\r\n      const url = new OAuth(mercadopago).getAuthorizationURL({\r\n        options: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos la url\r\n      return url;\r\n    },\r\n    async connect(code) {\r\n      // Obtenemos las credenciales del usuario usando el code que obtuvimos de oauth\r\n      const credentials = await new OAuth(mercadopago).create({\r\n        body: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          client_secret: process.env.MP_CLIENT_SECRET,\r\n          code,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos las credenciales\r\n      return credentials;\r\n    },\r\n  },\r\n  message: {\r\n    async list() {\r\n      const { data, error } = await supabase\r\n        .from(\"messages\")  // Tu tabla de mensajes en Supabase\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false });  // Puedes ordenar los mensajes por fecha de creación si lo deseas\r\n\r\n      if (error) {\r\n        throw new Error(`Error al obtener los mensajes: ${error.message}`);\r\n      }\r\n      \r\n      return data;\r\n    },\r\n    \r\n    async add(text) {\r\n      console.log(\"Agregando mensaje:\", text);\r\n    \r\n      // Guardamos solo el texto en la base de datos\r\n      const { data, error } = await supabase.from(\"messages\").insert([{ text }]);\r\n    \r\n      if (error) {\r\n        throw new Error(`Error al agregar el mensaje: ${error.message}`);\r\n      }\r\n    \r\n      console.log(\"Mensaje agregado:\", data);\r\n      return data;\r\n    },\r\n    \r\n\r\nasync submit(text) {\r\n  // Consultamos la base de datos de Supabase para obtener el accessToken\r\n  const { data: clientData, error } = await supabase\r\n    .from('clients')  // Nombre de la tabla donde está la columna marketplace\r\n    .select('marketplace')  // Seleccionamos solo la columna marketplace\r\n    .single();  // Nos aseguramos de obtener solo un registro (si es único)\r\n\r\n  if (error) {\r\n    console.error('Error al obtener el accessToken:', error);\r\n    throw new Error('No se pudo obtener el accessToken');\r\n  }\r\n\r\n  const accessToken = clientData?.marketplace;  // Usamos el accessToken de la columna marketplace\r\n  if (!accessToken) {\r\n    throw new Error('Access token no disponible');\r\n  }\r\n\r\n  const client = new MercadoPagoConfig({ accessToken });\r\n\r\n  const items = [\r\n    {\r\n      id: \"message\",\r\n      unit_price: 70,  // Precio del mensaje\r\n      quantity: 1,      // Cantidad\r\n      title: \"Mensaje de muro\",\r\n    }\r\n  ];\r\n\r\n  // Creamos la preferencia de pago en Mercado Pago\r\n  const preference = await new Preference(client).create({\r\n    body: {\r\n      items,\r\n      metadata: { text },\r\n      marketplace_fee: items[0].unit_price * 0.10,  // 10% como comisión para tu cuenta\r\n      back_urls: {\r\n        success: `${process.env.BASE_URL}/api/payment-success?text=${encodeURIComponent(text)}`,\r\n        failure: `${process.env.BASE_URL}/api/payment-failed`,\r\n        pending: `${process.env.BASE_URL}/api/payment-pending`,\r\n      },\r\n      auto_return: \"approved\",\r\n    },\r\n  });\r\n\r\n  return preference.init_point;  // URL para redirigir al usuario a la página de pago\r\n\r\n\r\n      \r\n      \r\n      // // Creamos el cliente de Mercado Pago usando el access token del Marketplace\r\n      // const accessToken = process.env.MP_ACCESS_TOKEN;\r\n      // const client = new MercadoPagoConfig({ accessToken });\r\n      // console.log('Access token:', accessToken);\r\n    \r\n      // // Definimos el artículo que será comprado (en este caso, un mensaje)\r\n      // const items = [\r\n      //   {\r\n      //     id: \"message\",        // ID del artículo\r\n      //     unit_price: 100,      // Precio unitario del mensaje\r\n      //     quantity: 1,          // Cantidad del artículo\r\n      //     title: \"Mensaje de muro\", // Título del artículo\r\n      //   }\r\n      // ];\r\n    \r\n      // // Creamos la preferencia de Mercado Pago incluyendo el precio, título y metadata\r\n      // const preference = await new Preference(client).create({\r\n      //   body: {\r\n      //     items: items,\r\n      //     metadata: {\r\n      //       text, // Metadata con el texto del mensaje\r\n      //     },\r\n      //     marketplace_fee: items[0].unit_price * 0.10, // Calculamos el 10% de comisión sobre el precio del artículo\r\n      //   },\r\n      // });\r\n    \r\n      // // Devolvemos el URL de la preferencia (la URL donde el usuario puede pagar)\r\n      // return preference.init_point;  // Este es el enlace para que el usuario inicie el pago\r\n    }\r\n    \r\n  },\r\n};\r\n\r\nexport default api;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/app/api/mercadopago/connect/route.js"],"sourcesContent":["import { NextResponse} from \"next/server\";\r\nimport api from \"../../../../api\";\r\n\r\n// Queremos que esta página sea dinámica para saber el estado del marketplace\r\nexport const revalidate = 10; // Revalidar cada 10 segundos, por ejemplo\r\nexport async function GET(request) {\r\n  // Obtenemos el code de la request\r\n  const code = request.nextUrl.searchParams.get(\"code\");\r\n\r\n  // Conectamos al usuario con el code y obtenemos las credenciales\r\n  const credentials = await api.user.connect(code);\r\n\r\n  // Actualizamos las credenciales del usuario\r\n  await api.user.update({ marketplace: credentials.access_token });\r\n\r\n  // Redirigimos al usuario a la página del marketplace\r\n  return NextResponse.redirect(`${process.env.APP_URL}/api/paymentResume`);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,aAAa,IAAI,0CAA0C;AACjE,eAAe,IAAI,OAAO;IAC/B,kCAAkC;IAClC,MAAM,OAAO,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;IAE9C,iEAAiE;IACjE,MAAM,cAAc,MAAM,qGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAE3C,4CAA4C;IAC5C,MAAM,qGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAAE,aAAa,YAAY,YAAY;IAAC;IAE9D,qDAAqD;IACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC;AACzE"}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
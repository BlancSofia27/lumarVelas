{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/utils/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLIC_ANON_KEY;\r\n\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Supabase URL and Key are required');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAGN,uCAAkC;;AAElC;AAEO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/api.js"],"sourcesContent":["import { readFileSync, writeFileSync } from \"node:fs\";\r\nimport { MercadoPagoConfig, Preference, OAuth } from \"mercadopago\";\r\nimport { supabase } from \"./utils/supabaseClient\";\r\nexport const mercadopago = new MercadoPagoConfig({ accessToken: process.env.MP_ACCESS_TOKEN });\r\n\r\nconst api = {\r\n  user: {\r\n    async fetch() {\r\n      // Obtenemos los datos de la tabla 'clients' desde Supabase\r\n      const { data, error } = await supabase\r\n        .from('clients')\r\n        .select('*')\r\n        .single(); // Asegura que solo devuelvas un objeto\r\n    \r\n      if (error) {\r\n        throw new Error(`Error al obtener los datos del cliente: ${error.message}`);\r\n      }\r\n    \r\n      // Devolvemos los datos del usuario\r\n      console.log('Datos del cliente:', data);\r\n      return data;\r\n    },\r\n    \r\n    async update(data) {\r\n      // Actualizamos los datos en Supabase\r\n      const { error } = await supabase\r\n      .from('clients')\r\n      .update(data)  // Actualiza la fila existente con los datos proporcionados\r\n      .eq('id', 1);  // Filtra para asegurar que actualizas la fila correcta (en este caso, la fila con id 1)\r\n  \r\n      if (error) {\r\n        throw new Error(`Error al actualizar los datos del cliente: ${error.message}`);\r\n      }\r\n  \r\n      // Si quieres devolver los datos actualizados (opcional)\r\n      console.log('Datos del cliente actualizados:', data);\r\n      return data;\r\n    },\r\n    async authorize() {\r\n      // Obtenemos la url de autorización\r\n      const url = new OAuth(mercadopago).getAuthorizationURL({\r\n        options: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos la url\r\n      return url;\r\n    },\r\n    async connect(code) {\r\n      // Obtenemos las credenciales del usuario usando el code que obtuvimos de oauth\r\n      const credentials = await new OAuth(mercadopago).create({\r\n        body: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          client_secret: process.env.MP_CLIENT_SECRET,\r\n          code,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos las credenciales\r\n      return credentials;\r\n    },\r\n  },\r\n  message: {\r\n    async list() {\r\n      const { data, error } = await supabase\r\n        .from(\"messages\")  // Tu tabla de mensajes en Supabase\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false });  // Puedes ordenar los mensajes por fecha de creación si lo deseas\r\n\r\n      if (error) {\r\n        throw new Error(`Error al obtener los mensajes: ${error.message}`);\r\n      }\r\n      \r\n      return data;\r\n    },\r\n    \r\n    async add(message) {\r\n      // Obtenemos los mensajes desde Supabase\r\n      const db = await api.message.list();\r\n    \r\n      // Si ya existe un mensaje con ese id, lanzamos un error\r\n      if (db.some((_message) => _message.id === message.id)) {\r\n        throw new Error(\"Message already added\");\r\n      }\r\n    \r\n      // Agregamos el nuevo mensaje a la base de datos\r\n      const { data, error } = await supabase\r\n        .from('messages')  // Asegúrate de que esta tabla exista en tu base de datos de Supabase\r\n        .insert([message]); // Insertamos el nuevo mensaje\r\n    \r\n      if (error) {\r\n        throw new Error(`Error al agregar el mensaje: ${error.message}`);\r\n      }\r\n    \r\n      // Devolvemos el nuevo mensaje insertado\r\n      console.log('Mensaje agregado:', data);\r\n      return data;\r\n    },\r\n    \r\n    async submit(text) {\r\n      // Creamos el cliente de Mercado Pago usando el access token del Marketplace\r\n      const accessToken = process.env.MP_ACCESS_TOKEN;\r\n      const client = new MercadoPagoConfig({ accessToken });\r\n      console.log('Access token:', accessToken);\r\n    \r\n      // Definimos el artículo que será comprado (en este caso, un mensaje)\r\n      const items = [\r\n        {\r\n          id: \"message\",        // ID del artículo\r\n          unit_price: 100,      // Precio unitario del mensaje\r\n          quantity: 1,          // Cantidad del artículo\r\n          title: \"Mensaje de muro\", // Título del artículo\r\n        }\r\n      ];\r\n    \r\n      // Creamos la preferencia de Mercado Pago incluyendo el precio, título y metadata\r\n      const preference = await new Preference(client).create({\r\n        body: {\r\n          items: items,\r\n          metadata: {\r\n            text, // Metadata con el texto del mensaje\r\n          },\r\n          marketplace_fee: items[0].unit_price * 0.10, // Calculamos el 10% de comisión sobre el precio del artículo\r\n        },\r\n      });\r\n    \r\n      // Devolvemos el URL de la preferencia (la URL donde el usuario puede pagar)\r\n      return preference.init_point;  // Este es el enlace para que el usuario inicie el pago\r\n    }\r\n    \r\n  },\r\n};\r\n\r\nexport default api;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/OneDrive/Escritorio/lumarVelas/my-app/app/api/paymentResume/page.js"],"sourcesContent":["import { useRouter } from \"next/router\"; // Importamos useRouter para la redirección\r\nimport api from \"../../../api\";\r\n\r\nexport default async function ResumePage() {\r\n  // Obtener los datos dinámicamente dentro del componente\r\n  const user = await api.user.fetch();\r\n  const messages = await api.message.list();\r\n  const authorizationUrl = await api.user.authorize();\r\n\r\n  // Función para manejar el envío del mensaje\r\n  async function add(formData) {\r\n    // Acción del servidor\r\n    \"use server\";\r\n\r\n    const message = formData.get(\"text\");\r\n    const url = await api.message.submit(message); // Suponemos que esta función retorna una URL\r\n\r\n    return url;\r\n  }\r\n\r\n  // Usamos useRouter para redirigir al cliente después del submit\r\n  const router = useRouter();\r\n\r\n  // Función para manejar la redirección\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevenimos el comportamiento por defecto\r\n    const formData = new FormData(e.target);\r\n\r\n    // Enviamos los datos al servidor\r\n    const url = await add(formData);\r\n\r\n    // Después de recibir la URL de respuesta, redirigimos\r\n    router.push(url); // Usamos router.push para redirigir al cliente\r\n  };\r\n\r\n  return (\r\n    <section className=\"grid gap-8\">\r\n      {/* Si el usuario ya autorizó la integración, mostramos el formulario */}\r\n      {user.marketplace ? (\r\n        <form onSubmit={handleSubmit} className=\"grid gap-2\">\r\n          <textarea\r\n            className=\"border-2 border-blue-400 p-2\"\r\n            name=\"text\"\r\n            placeholder=\"Hola perro\"\r\n            rows=\"3\"\r\n          />\r\n          <button className=\"rounded bg-blue-400 p-2\" type=\"submit\">\r\n            Enviar\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        // Si no autorizó la integración, mostramos un botón para redirigirlo a Mercado Pago a autorizar\r\n        <a className=\"rounded bg-blue-400 p-2 text-center\" href={authorizationUrl}>\r\n          Conectar Mercado Pago\r\n        </a>\r\n      )}\r\n\r\n      <ul className=\"grid gap-2\">\r\n        {messages.map((message) => (\r\n          <li key={message.id} className=\"rounded bg-blue-400/10 p-4\">\r\n            {message.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA,2NAAyC,2CAA2C;AACpF;;;;AAEe,eAAe;IAC5B,wDAAwD;IACxD,MAAM,OAAO,MAAM,mGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,KAAK;IACjC,MAAM,WAAW,MAAM,mGAAA,CAAA,UAAG,CAAC,OAAO,CAAC,IAAI;IACvC,MAAM,mBAAmB,MAAM,mGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS;IAEjD,4CAA4C;IAC5C,eAAe,IAAI,QAAQ;QAIzB,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,MAAM,MAAM,mGAAA,CAAA,UAAG,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,6CAA6C;QAE5F,OAAO;IACT;IAEA,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,8HAAA,CAAA,YAAS,AAAD;IAEvB,sCAAsC;IACtC,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc,IAAI,2CAA2C;QAC/D,MAAM,WAAW,IAAI,SAAS,EAAE,MAAM;QAEtC,iCAAiC;QACjC,MAAM,MAAM,MAAM,IAAI;QAEtB,sDAAsD;QACtD,OAAO,IAAI,CAAC,MAAM,+CAA+C;IACnE;IAEA,qBACE,8OAAC;QAAQ,WAAU;;YAEhB,KAAK,WAAW,iBACf,8OAAC;gBAAK,UAAU;gBAAc,WAAU;;kCACtC,8OAAC;wBACC,WAAU;wBACV,MAAK;wBACL,aAAY;wBACZ,MAAK;;;;;;kCAEP,8OAAC;wBAAO,WAAU;wBAA0B,MAAK;kCAAS;;;;;;;;;;;uBAK5D,gGAAgG;0BAChG,8OAAC;gBAAE,WAAU;gBAAsC,MAAM;0BAAkB;;;;;;0BAK7E,8OAAC;gBAAG,WAAU;0BACX,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC;wBAAoB,WAAU;kCAC5B,QAAQ,IAAI;uBADN,QAAQ,EAAE;;;;;;;;;;;;;;;;AAO7B"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
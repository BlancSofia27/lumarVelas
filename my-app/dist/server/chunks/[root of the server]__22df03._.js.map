{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/utils/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLIC_ANON_KEY;\r\n\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Supabase URL and Key are required');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAGN,uCAAkC;;AAElC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/api.js"],"sourcesContent":["import { readFileSync, writeFileSync } from \"node:fs\";\r\nimport { MercadoPagoConfig, Preference, OAuth } from \"mercadopago\";\r\nimport { supabase } from \"./utils/supabaseClient\";\r\nexport const mercadopago = new MercadoPagoConfig({ accessToken: process.env.MP_ACCESS_TOKEN });\r\n\r\nconst api = {\r\n  user: {\r\n    async fetch() {\r\n      // Obtenemos los datos de la tabla 'clients' desde Supabase\r\n      const { data, error } = await supabase\r\n        .from('clients')\r\n        .select('*')\r\n  \r\n      if (error) {\r\n        throw new Error(`Error al obtener los datos del cliente: ${error.message}`);\r\n      }\r\n  \r\n      // Devolvemos los datos como un objeto\r\n      return data;\r\n    },\r\n    async update(data) {\r\n      // Actualizamos los datos en Supabase\r\n      const { error } = await supabase\r\n        .from('clients')\r\n        .upsert(data, { onConflict: ['id'] }); // 'id' es la clave única de la tabla\r\n  \r\n      if (error) {\r\n        throw new Error(`Error al actualizar los datos del cliente: ${error.message}`);\r\n      }\r\n  \r\n      // Si quieres devolver los datos actualizados (opcional)\r\n      return data;\r\n    },\r\n    async authorize() {\r\n      // Obtenemos la url de autorización\r\n      const url = new OAuth(mercadopago).getAuthorizationURL({\r\n        options: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos la url\r\n      return url;\r\n    },\r\n    async connect(code) {\r\n      // Obtenemos las credenciales del usuario usando el code que obtuvimos de oauth\r\n      const credentials = await new OAuth(mercadopago).create({\r\n        body: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          client_secret: process.env.MP_CLIENT_SECRET,\r\n          code,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos las credenciales\r\n      return credentials;\r\n    },\r\n  },\r\n  message: {\r\n    async list() {\r\n      const { data, error } = await supabase\r\n        .from(\"messages\")  // Tu tabla de mensajes en Supabase\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false });  // Puedes ordenar los mensajes por fecha de creación si lo deseas\r\n\r\n      if (error) {\r\n        throw new Error(`Error al obtener los mensajes: ${error.message}`);\r\n      }\r\n      \r\n      return data;\r\n    },\r\n    \r\n    async add(message) {\r\n      // Obtenemos los mensajes desde Supabase\r\n      const db = await api.message.list();\r\n    \r\n      // Si ya existe un mensaje con ese id, lanzamos un error\r\n      if (db.some((_message) => _message.id === message.id)) {\r\n        throw new Error(\"Message already added\");\r\n      }\r\n    \r\n      // Agregamos el nuevo mensaje a la base de datos\r\n      const { data, error } = await supabase\r\n        .from('messages')  // Asegúrate de que esta tabla exista en tu base de datos de Supabase\r\n        .insert([message]); // Insertamos el nuevo mensaje\r\n    \r\n      if (error) {\r\n        throw new Error(`Error al agregar el mensaje: ${error.message}`);\r\n      }\r\n    \r\n      // Devolvemos el nuevo mensaje insertado\r\n      return data;\r\n    },\r\n    \r\n    async submit(text) {\r\n      // Creamos el cliente de Mercado Pago usando el access token del Marketplace\r\n      const accessToken = process.env.MP_ACCESS_TOKEN;\r\n      const client = new MercadoPagoConfig({ accessToken});\r\n      console.log(accessToken)\r\n      // Creamos la preferencia incluyendo el precio, título y metadata.\r\n      const preference = await new Preference(client).create({\r\n        body: {\r\n          items: [\r\n            {\r\n              id: \"message\",\r\n              unit_price: 100,\r\n              quantity: 1,\r\n              title: \"Mensaje de muro\",\r\n            },\r\n          ],\r\n          metadata: {\r\n            text,\r\n          },\r\n          marketplace_fee: unit_price * 0.10, // Le agregamos el 10% de comisión  \r\n        },\r\n      });\r\n\r\n      // Devolvemos el init point (url de pago) para que el usuario pueda pagar\r\n      return preference.init_point;\r\n    },\r\n  },\r\n};\r\n\r\nexport default api;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/mercadopago/connect/route.js"],"sourcesContent":["import { NextResponse} from \"next/server\";\r\nimport api from \"../../../../api\";\r\n\r\n// Queremos que esta página sea dinámica para saber el estado del marketplace\r\nexport const revalidate = 10; // Revalidar cada 10 segundos, por ejemplo\r\nexport async function GET(request) {\r\n  // Obtenemos el code de la request\r\n  const code = request.nextUrl.searchParams.get(\"code\");\r\n\r\n  // Conectamos al usuario con el code y obtenemos las credenciales\r\n  const credentials = await api.user.connect(code);\r\n\r\n  // Actualizamos las credenciales del usuario\r\n  await api.user.update({ marketplace: credentials.access_token });\r\n\r\n  // Redirigimos al usuario a la página del marketplace\r\n  return NextResponse.redirect(`${process.env.APP_URL}/api/paymentResume`);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,aAAa,IAAI,0CAA0C;AACjE,eAAe,IAAI,OAAO;IAC/B,kCAAkC;IAClC,MAAM,OAAO,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;IAE9C,iEAAiE;IACjE,MAAM,cAAc,MAAM,qGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAE3C,4CAA4C;IAC5C,MAAM,qGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAAE,aAAa,YAAY,YAAY;IAAC;IAE9D,qDAAqD;IACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC;AACzE"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
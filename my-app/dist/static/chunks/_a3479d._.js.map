{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/Desktop/lumarVelas/my-app/store/cartSlice.ts"],"sourcesContent":["// store/cartSlice.ts\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CartItem {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  img: string;\r\n  fragance:string;\r\n  quantity: number; // Agregamos el campo quantity\r\n}\r\n\r\ninterface CartState {\r\n  items: CartItem[];\r\n  total: number;\r\n}\r\n\r\nconst initialState: CartState = {\r\n  items: [],\r\n  total: 0,\r\n};\r\n\r\nexport const cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addItemToCart: (state, action: PayloadAction<CartItem>) => {\r\n      const existingItem = state.items.find(item => item.id === action.payload.id);\r\n      if (existingItem) {\r\n        existingItem.quantity += 1;\r\n      } else {\r\n        state.items.push({ ...action.payload, quantity: 1 }); // Aseguramos que quantity se inicie en 1\r\n      }\r\n      state.total += action.payload.price;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addItemToCart } = cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;;;AACrB;;AAgBA,MAAM,eAA0B;IAC9B,OAAO,EAAE;IACT,OAAO;AACT;AAEO,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACnC,MAAM;IACN;IACA,UAAU;QACR,eAAe,CAAC,OAAO;YACrB,MAAM,eAAe,MAAM,KAAK,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,OAAO,OAAO,CAAC,EAAE;YAC3E,IAAI,cAAc;gBAChB,aAAa,QAAQ,IAAI;YAC3B,OAAO;gBACL,MAAM,KAAK,CAAC,IAAI,CAAC;oBAAE,GAAG,OAAO,OAAO;oBAAE,UAAU;gBAAE,IAAI,yCAAyC;YACjG;YACA,MAAM,KAAK,IAAI,OAAO,OAAO,CAAC,KAAK;QACrC;IACF;AACF;AAEO,MAAM,EAAE,aAAa,EAAE,GAAG,UAAU,OAAO;uCACnC,UAAU,OAAO"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/Desktop/lumarVelas/my-app/store/index.ts"],"sourcesContent":["// store/index.ts\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport cartReducer from './cartSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cart: cartReducer,\r\n  },\r\n});\r\n\r\n// Tipos de RootState y AppDispatch para usar en componentes\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;AAEjB;AADA;;;AAGO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,MAAM,qHAAA,CAAA,UAAW;IACnB;AACF"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/blanc/Desktop/lumarVelas/my-app/components/ReduxProvider.tsx"],"sourcesContent":["// app/ReduxProvider.tsx\r\n\"use client\";\r\n\r\nimport { ReactNode } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '@/store';\r\n\r\ninterface ReduxProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst ReduxProvider = ({ children }: ReduxProviderProps) => {\r\n  return <Provider store={store}>{children}</Provider>;\r\n};\r\n\r\nexport default ReduxProvider;\r\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AAKxB;AADA;AAHA;;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAAsB;IACrD,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,iHAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFM;uCAIS"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
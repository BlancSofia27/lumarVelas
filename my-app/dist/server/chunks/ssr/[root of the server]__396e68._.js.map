{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/utils/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLIC_ANON_KEY;\r\n\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Supabase URL and Key are required');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAGN,uCAAkC;;AAElC;AAEO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/utils/supabaseServices.js"],"sourcesContent":["// supabaseService.js\r\nimport { supabase } from './supabaseClient';\r\n\r\n// Función para subir una imagen a Supabase Storage\r\nexport const uploadImage = async (image, fieldName) => {\r\n  if (image) {\r\n    const { data, error } = await supabase.storage\r\n      .from('productos')\r\n      .upload(`images/${Date.now()}_${fieldName}.jpg`, image, {\r\n        contentType: 'image/jpeg',\r\n      });\r\n    if (error) throw error;\r\n    return data.path;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Función para crear un producto\r\nexport const createProduct = async (product) => {\r\n  try {\r\n    // Subir imágenes\r\n    const imagePath = await uploadImage(product.image, 'imagen');\r\n    const image1Path = await uploadImage(product.image1, 'imagen1');\r\n    const image2Path = await uploadImage(product.image2, 'imagen2');\r\n\r\n    // Insertar producto en la base de datos\r\n    const { data, error } = await supabase\r\n      .from('productos')\r\n      .insert([\r\n        {\r\n          nombre: product.name,\r\n          descripcion: product.description || '',\r\n          precio: parseFloat(product.price) || null,\r\n          fragancia: product.fragancia,\r\n          intensidad: product.intensidad,\r\n          imagen: imagePath,\r\n          imagen1: image1Path,\r\n          imagen2: image2Path,\r\n        },\r\n      ]);\r\n\r\n    if (error) throw error;\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Error al crear el producto: ' + error.message);\r\n  }\r\n};\r\n\r\n// Función para obtener productos (puedes modificar esto según lo necesites)\r\nexport const getProducts = async () => {\r\n  try {\r\n    const { data, error } = await supabase.from('productos').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Error al obtener productos: ' + error.message);\r\n  }\r\n};\r\n\r\n// Función para obtener un producto por ID\r\nexport const getProductById = async (id) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('productos')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Error al obtener el producto: ' + error.message);\r\n  }\r\n};\r\n\r\n// Función para actualizar un producto\r\nexport const updateProduct = async (id, product) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('productos')\r\n      .update({\r\n        nombre: product.name,\r\n        descripcion: product.description || '',\r\n        precio: parseFloat(product.price) || null,\r\n        fragancia: product.fragancia,\r\n        intensidad: product.intensidad,\r\n        imagen: product.image || null,\r\n        imagen1: product.image1 || null,\r\n        imagen2: product.image2 || null,\r\n      })\r\n      .eq('id', id);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Error al actualizar el producto: ' + error.message);\r\n  }\r\n};\r\n\r\n// Función para eliminar un producto\r\nexport const deleteProduct = async (id) => {\r\n  try {\r\n    const { data, error } = await supabase.from('productos').delete().eq('id', id);\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Error al eliminar el producto: ' + error.message);\r\n  }\r\n};\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/adminPanel/productos/newProduct/page.tsx"],"sourcesContent":["import FormProduct from \"@/components/Admin/formProduct\";\r\n\r\n\r\nexport default function NewProduct() {\r\n    return (\r\n      <>\r\n        <FormProduct/>\r\n      </>\r\n    )\r\n  }"],"names":[],"mappings":";;;;AAAA;;;AAGe,SAAS;IACpB,qBACE;kBACE,cAAA,8OAAC,mIAAA,CAAA,UAAW;;;;;;AAGlB"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/api.js"],"sourcesContent":["import { MercadoPagoConfig, Preference, OAuth } from \"mercadopago\";\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Crea el cliente de Supabase\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE);\r\n\r\nexport const mercadopago = new MercadoPagoConfig({ accessToken: process.env.MP_ACCESS_TOKEN });\r\n\r\nconst api = {\r\n  user: {\r\n    async fetch() {\r\n      // Obtener datos del usuario desde Supabase\r\n      const { data, error } = await supabase\r\n        .from('users')  // Cambia 'users' por tu tabla de usuarios\r\n        .select('*')\r\n        .eq('id', process.env.USER_ID)  // Reemplaza con el ID del usuario\r\n        .single();\r\n\r\n      if (error) {\r\n        throw new Error('Error al obtener el usuario: ' + error.message);\r\n      }\r\n\r\n      return data;\r\n    },\r\n    async update(data) {\r\n      // Actualizar datos del usuario si es necesario\r\n      const { data: updatedData, error } = await supabase\r\n        .from('users')  // Cambia 'users' por tu tabla de usuarios\r\n        .update(data)\r\n        .eq('id', process.env.USER_ID); // Usa el ID del usuario\r\n\r\n      if (error) {\r\n        throw new Error('Error al actualizar los datos del usuario: ' + error.message);\r\n      }\r\n\r\n      return updatedData;\r\n    },\r\n    async authorize() {\r\n      // Obtenemos la url de autorización\r\n      const url = new OAuth(mercadopago).getAuthorizationURL({\r\n        options: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos la url\r\n      return url;\r\n    },\r\n    async connect(code) {\r\n      // Obtenemos las credenciales del usuario usando el code que obtuvimos de oauth\r\n      const credentials = await new OAuth(mercadopago).create({\r\n        body: {\r\n          client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,\r\n          client_secret: process.env.MP_CLIENT_SECRET,\r\n          code,\r\n          redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`,\r\n        },\r\n      });\r\n\r\n      // Devolvemos las credenciales\r\n      return credentials;\r\n    },\r\n  },\r\n\r\n  sale: {\r\n    async create({ userId, items, totalAmount }) {\r\n      // Creamos la preferencia de pago en MercadoPago\r\n      const preference = await new Preference(mercadopago).create({\r\n        body: {\r\n          items: items.map(item => ({\r\n            id: item.id,\r\n            title: item.title,\r\n            quantity: item.quantity,\r\n            unit_price: item.unit_price,\r\n          })),\r\n          marketplace_fee: 5,  // Si aplicas una tarifa de mercado\r\n        },\r\n      });\r\n\r\n      // Crear un registro en la base de datos de Supabase para la venta\r\n      const { data, error } = await supabase\r\n        .from('sales')\r\n        .insert([{\r\n          sale_id: preference.id,  // ID de la compra de MercadoPago\r\n          user_id: userId,\r\n          amount: totalAmount,\r\n          status: 'pendiente',  // Puedes cambiar el estado más tarde según el resultado del pago\r\n          items: items,  // Almacenamos los detalles de los productos comprados\r\n        }]);\r\n\r\n      if (error) {\r\n        throw new Error('Error al registrar la venta: ' + error.message);\r\n      }\r\n\r\n      // Devolvemos la URL para realizar el pago\r\n      return { init_point: preference.init_point, sale: data };\r\n    },\r\n\r\n    async updateStatus(saleId, status) {\r\n      // Actualiza el estado de la venta cuando se complete el pago (por ejemplo, \"pagado\")\r\n      const { data, error } = await supabase\r\n        .from('sales')\r\n        .update({ status })\r\n        .eq('sale_id', saleId);\r\n\r\n      if (error) {\r\n        throw new Error('Error al actualizar el estado de la venta: ' + error.message);\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    async getSaleDetails(saleId) {\r\n      // Obtiene los detalles de la venta de la base de datos\r\n      const { data, error } = await supabase\r\n        .from('sales')\r\n        .select('*')\r\n        .eq('sale_id', saleId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw new Error('Error al obtener los detalles de la venta: ' + error.message);\r\n      }\r\n\r\n      return data;\r\n    },\r\n  },\r\n\r\n  message: {\r\n    async list() {\r\n      // Leemos el archivo de la base de datos de los mensajes\r\n      const db = readFileSync(\"db/message.db\");\r\n\r\n      // Devolvemos los datos como un array de objetos\r\n      return JSON.parse(db.toString());\r\n    },\r\n    async add(message) {\r\n      // Obtenemos los mensajes\r\n      const db = await api.message.list();\r\n\r\n      // Si ya existe un mensaje con ese id, lanzamos un error\r\n      if (db.some((_message) => _message.id === message.id)) {\r\n        throw new Error(\"Message already added\");\r\n      }\r\n\r\n      // Agregamos el nuevo mensaje\r\n      const draft = db.concat(message);\r\n\r\n      // Guardamos los datos\r\n      writeFileSync(\"db/message.db\", JSON.stringify(draft, null, 2));\r\n    },\r\n    async submit(text) {\r\n      // Creamos el cliente de Mercado Pago usando el access token del Marketplace\r\n      const accessToken = process.env.MP_ACCESS_TOKEN;\r\n      const client = new MercadoPagoConfig({ accessToken });\r\n      console.log(accessToken);\r\n      // Creamos la preferencia incluyendo el precio, título y metadata.\r\n      const preference = await new Preference(client).create({\r\n        body: {\r\n          items: [\r\n            {\r\n              id: \"message\",\r\n              unit_price: 100,\r\n              quantity: 1,\r\n              title: \"Mensaje de muro\",\r\n            },\r\n          ],\r\n          metadata: {\r\n            text,\r\n          },\r\n          marketplace_fee: 5, // Le agregamos ARS 5 de comisión\r\n        },\r\n      });\r\n\r\n      // Devolvemos el init point (url de pago) para que el usuario pueda pagar\r\n      return preference.init_point;\r\n    },\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/paymentResume/page.js"],"sourcesContent":["import { redirect } from \"next/navigation\";\r\nimport api from \"../../../api\";\r\nimport PurchaseResume from \"../../../components/PurchaseResume\";\r\n\r\n// Utilizamos la revalidación para asegurarnos de que los datos se actualicen en cada visita\r\n\r\n\r\nexport default async function ResumePage() {\r\n  // Obtener los datos dinámicamente dentro del componente\r\n  const user = await api.user.fetch();\r\n  const messages = await api.message.list();\r\n  const authorizationUrl = await api.user.authorize();\r\n\r\n  // Función para manejar el envío del mensaje\r\n  async function add(formData) {\r\n    \"use server\";\r\n\r\n    const message = formData.get(\"text\");\r\n    const url = await api.message.submit(message);\r\n\r\n    redirect(url);\r\n  }\r\n\r\n  return (\r\n    <section className=\"grid gap-8\">\r\n      <PurchaseResume/>\r\n      {/* Si el usuario ya autorizó la integración, mostramos el formulario */}\r\n      {user.marketplace ? (\r\n        <form action={add} className=\"grid gap-2\">\r\n          <textarea\r\n            className=\"border-2 border-blue-400 p-2\"\r\n            name=\"text\"\r\n            placeholder=\"Hola perro\"\r\n            rows=\"3\"\r\n          />\r\n          <button className=\"rounded bg-blue-400 p-2\" type=\"submit\">\r\n            Enviar\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        // Si no autorizó la integración, mostramos un botón para redirigirlo a Mercado Pago a autorizar\r\n        <a className=\"rounded bg-blue-400 p-2 text-center\" href={authorizationUrl}>\r\n          Conectar Mercado Pago\r\n        </a>\r\n      )}\r\n      <ul className=\"grid gap-2\">\r\n        {messages.map((message) => (\r\n          <li key={message.id} className=\"rounded bg-blue-400/10 p-4\">\r\n            {message.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAFA;;;;;;;MAaE,4CAA4C;AAC5C,wBAAA,eAAe,IAAI,QAAQ;IAGzB,MAAM,UAAU,SAAS,GAAG,CAAC;IAC7B,MAAM,MAAM,MAAM,mGAAA,CAAA,UAAG,CAAC,OAAO,CAAC,MAAM,CAAC;IAErC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAda,eAAe;IAC5B,wDAAwD;IACxD,MAAM,OAAO,MAAM,mGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,KAAK;IACjC,MAAM,WAAW,MAAM,mGAAA,CAAA,UAAG,CAAC,OAAO,CAAC,IAAI;IACvC,MAAM,mBAAmB,MAAM,mGAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS;QAGlC,MAAf,+OAAA;IASA,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC,6HAAA,CAAA,UAAc;;;;;YAEd,KAAK,WAAW,iBACf,8OAAC;gBAAK,QAAQ;gBAAK,WAAU;;kCAC3B,8OAAC;wBACC,WAAU;wBACV,MAAK;wBACL,aAAY;wBACZ,MAAK;;;;;;kCAEP,8OAAC;wBAAO,WAAU;wBAA0B,MAAK;kCAAS;;;;;;;;;;;uBAK5D,gGAAgG;0BAChG,8OAAC;gBAAE,WAAU;gBAAsC,MAAM;0BAAkB;;;;;;0BAI7E,8OAAC;gBAAG,WAAU;0BACX,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC;wBAAoB,WAAU;kCAC5B,QAAQ,IAAI;uBADN,QAAQ,EAAE;;;;;;;;;;;;;;;;AAO7B"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}